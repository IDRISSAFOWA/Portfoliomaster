{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projets\\\\Portfoliomaster\\\\src\\\\components\\\\Darmode\\\\Toggle.js\";\nimport * as React from 'react';\nimport ToggleButton from '@mui/material/ToggleButton';\nimport ToggleButtonGroup from '@mui/material/ToggleButtonGroup';\nimport Tooltip from '@mui/material/Tooltip';\nimport French from '../../assests/images/french.png';\nimport English from '../../assests/images/english.png';\n\nconst DarkModeToggle = () => {\n  const [alignment, setAlignment] = React.useState('left');\n  const [alignment1, setAlignment1] = React.useState('left');\n\n  const handleAlignment = (event, newAlignment) => {\n    setAlignment(newAlignment);\n  };\n\n  const handleAlignment1 = (event, newAlignment) => {\n    setAlignment(newAlignment);\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ToggleButtonGroup, {\n    defaultChecked: 1,\n    value: alignment,\n    exclusive: true,\n    size: \"small\",\n    onChange: handleAlignment,\n    \"aria-label\": \"text alignment\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Tooltip, {\n    title: \"Fran\\xE7ais\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(ToggleButton, {\n    value: \"left\",\n    \"aria-label\": \"left aligned\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: French,\n    width: 30,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 17\n    }\n  }))), /*#__PURE__*/React.createElement(Tooltip, {\n    title: \"English\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(ToggleButton, {\n    value: \"center\",\n    \"aria-label\": \"centered\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: English,\n    width: 22,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 17\n    }\n  })))), /*#__PURE__*/React.createElement(ToggleButtonGroup, {\n    defaultChecked: 1,\n    value: handleAlignment1,\n    exclusive: true,\n    size: \"small\",\n    onChange: handleAlignment1,\n    \"aria-label\": \"text alignment\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 10\n    }\n  }, /*#__PURE__*/React.createElement(Tooltip, {\n    title: \"Darck Mode\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(ToggleButton, {\n    value: \"left\",\n    \"aria-label\": \"left aligned\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 12\n    }\n  }, \"\\uD83C\\uDF19\")), /*#__PURE__*/React.createElement(Tooltip, {\n    title: \"Light Mode\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(ToggleButton, {\n    value: \"center\",\n    \"aria-label\": \"centered\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 12\n    }\n  }, \"\\uD83D\\uDD06\"))));\n}; // export const DarkModeToggle = () => {\n//   const [isDark, setIsDark] = useState(true);\n//   const systemPrefersDark = useMediaQuery(\n//     {\n//       query: \"(prefers-color-scheme: dark)\",\n//     },\n//     undefined,\n//     (isSystemDark) => setIsDark(isSystemDark)\n//   );\n//   return (\n//     <Toggle\n//       checked={isDark}\n//       onChange={({ target }) => setIsDark(target.checked)}\n//       icons={{ checked: \"ðŸŒ™\", unchecked: \"ðŸ”†\" }}\n//       aria-label=\"Dark mode toggle\"\n//     />\n//   );\n// };\n// \n\n\nexport default DarkModeToggle;","map":{"version":3,"sources":["D:/Projets/Portfoliomaster/src/components/Darmode/Toggle.js"],"names":["React","ToggleButton","ToggleButtonGroup","Tooltip","French","English","DarkModeToggle","alignment","setAlignment","useState","alignment1","setAlignment1","handleAlignment","event","newAlignment","handleAlignment1"],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport ToggleButton from '@mui/material/ToggleButton';\r\nimport ToggleButtonGroup from '@mui/material/ToggleButtonGroup';\r\nimport Tooltip from '@mui/material/Tooltip';\r\nimport French from '../../assests/images/french.png';\r\nimport English from '../../assests/images/english.png';\r\n\r\nconst DarkModeToggle = () => {\r\n    const [alignment, setAlignment] = React.useState('left');\r\n    const [alignment1, setAlignment1] = React.useState('left');\r\n    \r\n    const handleAlignment = (event, newAlignment) => {\r\n        setAlignment(newAlignment);\r\n    };\r\n    const handleAlignment1 = (event, newAlignment) => {\r\n        setAlignment(newAlignment);\r\n    };\r\n\r\n    return (\r\n        <>\r\n        <ToggleButtonGroup\r\n          defaultChecked={1}\r\n            value={alignment}\r\n            exclusive\r\n            size='small'\r\n            onChange={handleAlignment}\r\n            aria-label=\"text alignment\"\r\n        >\r\n            <Tooltip title=\"FranÃ§ais\">\r\n            <ToggleButton value=\"left\" aria-label=\"left aligned\">\r\n                <img src={French} width={30} />\r\n            </ToggleButton>\r\n            </Tooltip>\r\n            <Tooltip title=\"English\">\r\n            <ToggleButton value=\"center\" aria-label=\"centered\">\r\n                <img src={English} width={22} />\r\n            </ToggleButton>\r\n            </Tooltip>\r\n            {/* <Tooltip title=\"Darck Mode\">\r\n            <ToggleButton value=\"left\" aria-label=\"left aligned\">\r\n                ðŸŒ™\r\n            </ToggleButton>\r\n            </Tooltip  >\r\n            <Tooltip title=\"Light Mode\">\r\n            <ToggleButton value=\"center\" aria-label=\"centered\">\r\n                ðŸ”†\r\n            </ToggleButton>\r\n            </Tooltip> */}\r\n        </ToggleButtonGroup>\r\n        \r\n         <ToggleButtonGroup\r\n         defaultChecked={1}\r\n           value={handleAlignment1}\r\n           exclusive\r\n           size='small'\r\n           onChange={handleAlignment1}\r\n           aria-label=\"text alignment\"\r\n       >\r\n           {/* <Tooltip title=\"FranÃ§ais\">\r\n           <ToggleButton value=\"left\" aria-label=\"left aligned\">\r\n               <img src={French} width={30} />\r\n           </ToggleButton>\r\n           </Tooltip>\r\n           <Tooltip title=\"English\">\r\n           <ToggleButton value=\"center\" aria-label=\"centered\">\r\n               <img src={English} width={22} />\r\n           </ToggleButton>\r\n           </Tooltip> */}\r\n           <Tooltip title=\"Darck Mode\">\r\n           <ToggleButton value=\"left\" aria-label=\"left aligned\">\r\n               ðŸŒ™\r\n           </ToggleButton>\r\n           </Tooltip  >\r\n           <Tooltip title=\"Light Mode\">\r\n           <ToggleButton value=\"center\" aria-label=\"centered\">\r\n               ðŸ”†\r\n           </ToggleButton>\r\n           </Tooltip>\r\n       </ToggleButtonGroup>\r\n       </>\r\n        \r\n    );\r\n\r\n}\r\n\r\n// export const DarkModeToggle = () => {\r\n//   const [isDark, setIsDark] = useState(true);\r\n\r\n//   const systemPrefersDark = useMediaQuery(\r\n//     {\r\n//       query: \"(prefers-color-scheme: dark)\",\r\n//     },\r\n//     undefined,\r\n//     (isSystemDark) => setIsDark(isSystemDark)\r\n//   );\r\n\r\n//   return (\r\n//     <Toggle\r\n//       checked={isDark}\r\n//       onChange={({ target }) => setIsDark(target.checked)}\r\n//       icons={{ checked: \"ðŸŒ™\", unchecked: \"ðŸ”†\" }}\r\n//       aria-label=\"Dark mode toggle\"\r\n//     />\r\n//   );\r\n// };\r\n// \r\n\r\nexport default DarkModeToggle;"]},"metadata":{},"sourceType":"module"}