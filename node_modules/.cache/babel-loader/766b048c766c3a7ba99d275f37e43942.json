{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projets\\\\Portfoliomaster\\\\src\\\\components\\\\Darmode\\\\Toggle.js\";\nimport * as React from 'react';\nimport ToggleButton from '@mui/material/ToggleButton';\nimport ToggleButtonGroup from '@mui/material/ToggleButtonGroup';\nimport Tooltip from '@mui/material/Tooltip';\nimport French from '../../assests/images/french.png';\nimport English from '../../assests/images/english.png';\nimport { Box } from '@mui/material';\n\nconst DarkModeToggle = () => {\n  const [alignment, setAlignment] = React.useState('left');\n  const [alignment1, setAlignment1] = React.useState('left');\n\n  const handleAlignment = (event, newAlignment) => {\n    setAlignment(newAlignment);\n  };\n\n  const handleAlignment1 = (event, newAlignment) => {\n    setAlignment1(newAlignment);\n  };\n\n  return /*#__PURE__*/React.createElement(Box, {\n    display: 'flex',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ToggleButtonGroup, {\n    value: alignment,\n    exclusive: true,\n    size: \"small\",\n    onChange: handleAlignment,\n    \"aria-label\": \"text alignment\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Tooltip, {\n    title: \"Fran\\xE7ais\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(ToggleButton, {\n    value: \"left\",\n    \"aria-label\": \"left aligned\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: French,\n    width: 30,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 29\n    }\n  }))), /*#__PURE__*/React.createElement(Tooltip, {\n    title: \"English\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(ToggleButton, {\n    value: \"center\",\n    \"aria-label\": \"centered\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: English,\n    width: 22,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 29\n    }\n  })))), /*#__PURE__*/React.createElement(ToggleButtonGroup, {\n    value: alignment1,\n    exclusive: true,\n    size: \"small\",\n    onChange: handleAlignment1,\n    \"aria-label\": \"text alignment\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Tooltip, {\n    title: \"Darck Mode\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(ToggleButton, {\n    value: \"left\",\n    \"aria-label\": \"left aligned\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 25\n    }\n  }, \"\\uD83C\\uDF19\")), /*#__PURE__*/React.createElement(Tooltip, {\n    title: \"Light Mode\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(ToggleButton, {\n    value: \"center\",\n    \"aria-label\": \"centered\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 25\n    }\n  }, \"\\uD83D\\uDD06\"))));\n}; // export const DarkModeToggle = () => {\n//   const [isDark, setIsDark] = useState(true);\n//   const systemPrefersDark = useMediaQuery(\n//     {\n//       query: \"(prefers-color-scheme: dark)\",\n//     },\n//     undefined,\n//     (isSystemDark) => setIsDark(isSystemDark)\n//   );\n//   return (\n//     <Toggle\n//       checked={isDark}\n//       onChange={({ target }) => setIsDark(target.checked)}\n//       icons={{ checked: \"ðŸŒ™\", unchecked: \"ðŸ”†\" }}\n//       aria-label=\"Dark mode toggle\"\n//     />\n//   );\n// };\n// \n\n\nexport default DarkModeToggle;","map":{"version":3,"sources":["D:/Projets/Portfoliomaster/src/components/Darmode/Toggle.js"],"names":["React","ToggleButton","ToggleButtonGroup","Tooltip","French","English","Box","DarkModeToggle","alignment","setAlignment","useState","alignment1","setAlignment1","handleAlignment","event","newAlignment","handleAlignment1"],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport ToggleButton from '@mui/material/ToggleButton';\r\nimport ToggleButtonGroup from '@mui/material/ToggleButtonGroup';\r\nimport Tooltip from '@mui/material/Tooltip';\r\nimport French from '../../assests/images/french.png';\r\nimport English from '../../assests/images/english.png';\r\nimport { Box } from '@mui/material';\r\n\r\nconst DarkModeToggle = () => {\r\n    const [alignment, setAlignment] = React.useState('left');\r\n    const [alignment1, setAlignment1] = React.useState('left');\r\n\r\n    const handleAlignment = (event, newAlignment) => {\r\n        setAlignment(newAlignment);\r\n    };\r\n    const handleAlignment1 = (event, newAlignment) => {\r\n        setAlignment1(newAlignment);\r\n    };\r\n\r\n    return (\r\n      <Box display={'flex'}>\r\n                <ToggleButtonGroup\r\n                    value={alignment}\r\n                    exclusive\r\n                    size='small'\r\n                    onChange={handleAlignment}\r\n                    aria-label=\"text alignment\"\r\n                >\r\n                    <Tooltip title=\"FranÃ§ais\">\r\n                        <ToggleButton  value=\"left\" aria-label=\"left aligned\">\r\n                            <img src={French} width={30} />\r\n                        </ToggleButton>\r\n                    </Tooltip>\r\n                    <Tooltip title=\"English\">\r\n                        <ToggleButton value=\"center\" aria-label=\"centered\">\r\n                            <img src={English} width={22} />\r\n                        </ToggleButton>\r\n                    </Tooltip>\r\n                    {/* <Tooltip title=\"Darck Mode\">\r\n            <ToggleButton value=\"left\" aria-label=\"left aligned\">\r\n                ðŸŒ™\r\n            </ToggleButton>\r\n            </Tooltip  >\r\n            <Tooltip title=\"Light Mode\">\r\n            <ToggleButton value=\"center\" aria-label=\"centered\">\r\n                ðŸ”†\r\n            </ToggleButton>\r\n            </Tooltip> */}\r\n                </ToggleButtonGroup>\r\n\r\n                <ToggleButtonGroup\r\n                    value={alignment1}\r\n                    exclusive\r\n                    size='small'\r\n                    onChange={handleAlignment1}\r\n                    aria-label=\"text alignment\"\r\n                >\r\n                    {/* <Tooltip title=\"FranÃ§ais\">\r\n           <ToggleButton value=\"left\" aria-label=\"left aligned\">\r\n               <img src={French} width={30} />\r\n           </ToggleButton>\r\n           </Tooltip>\r\n           <Tooltip title=\"English\">\r\n           <ToggleButton value=\"center\" aria-label=\"centered\">\r\n               <img src={English} width={22} />\r\n           </ToggleButton>\r\n           </Tooltip> */}\r\n                    <Tooltip title=\"Darck Mode\">\r\n                        <ToggleButton value=\"left\" aria-label=\"left aligned\">\r\n                            ðŸŒ™\r\n                        </ToggleButton>\r\n                    </Tooltip  >\r\n                    <Tooltip title=\"Light Mode\">\r\n                        <ToggleButton value=\"center\" aria-label=\"centered\">\r\n                            ðŸ”†\r\n                        </ToggleButton>\r\n                    </Tooltip>\r\n                </ToggleButtonGroup>\r\n                </Box >\r\n            );\r\n}\r\n\r\n// export const DarkModeToggle = () => {\r\n//   const [isDark, setIsDark] = useState(true);\r\n\r\n//   const systemPrefersDark = useMediaQuery(\r\n//     {\r\n//       query: \"(prefers-color-scheme: dark)\",\r\n//     },\r\n//     undefined,\r\n//     (isSystemDark) => setIsDark(isSystemDark)\r\n//   );\r\n\r\n//   return (\r\n//     <Toggle\r\n//       checked={isDark}\r\n//       onChange={({ target }) => setIsDark(target.checked)}\r\n//       icons={{ checked: \"ðŸŒ™\", unchecked: \"ðŸ”†\" }}\r\n//       aria-label=\"Dark mode toggle\"\r\n//     />\r\n//   );\r\n// };\r\n// \r\n\r\nexport default DarkModeToggle;"]},"metadata":{},"sourceType":"module"}