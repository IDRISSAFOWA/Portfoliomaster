{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projets\\\\Portfoliomaster\\\\src\\\\components\\\\Darmode\\\\Toggle.js\";\nimport * as React from 'react';\nimport FormatAlignLeftIcon from '@mui/icons-material/FormatAlignLeft';\nimport FormatAlignCenterIcon from '@mui/icons-material/FormatAlignCenter';\nimport FormatAlignRightIcon from '@mui/icons-material/FormatAlignRight';\nimport FormatAlignJustifyIcon from '@mui/icons-material/FormatAlignJustify';\nimport ToggleButton from '@mui/material/ToggleButton';\nimport ToggleButtonGroup from '@mui/material/ToggleButtonGroup';\n\nconst DarkModeToggle = () => {\n  const [alignment, setAlignment] = React.useState('left');\n\n  const handleAlignment = (event, newAlignment) => {\n    setAlignment(newAlignment);\n  };\n\n  return /*#__PURE__*/React.createElement(ToggleButtonGroup, {\n    value: alignment,\n    exclusive: true,\n    size: \"small\",\n    onChange: handleAlignment,\n    \"aria-label\": \"text alignment\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ToggleButton, {\n    value: \"left\",\n    \"aria-label\": \"left aligned\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }\n  }, \"\\uD83C\\uDF19\"), /*#__PURE__*/React.createElement(ToggleButton, {\n    value: \"center\",\n    \"aria-label\": \"centered\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }\n  }, \"\\uD83D\\uDD06\"));\n}; // export const DarkModeToggle = () => {\n//   const [isDark, setIsDark] = useState(true);\n//   const systemPrefersDark = useMediaQuery(\n//     {\n//       query: \"(prefers-color-scheme: dark)\",\n//     },\n//     undefined,\n//     (isSystemDark) => setIsDark(isSystemDark)\n//   );\n//   return (\n//     <Toggle\n//       checked={isDark}\n//       onChange={({ target }) => setIsDark(target.checked)}\n//       icons={{ checked: \"ðŸŒ™\", unchecked: \"ðŸ”†\" }}\n//       aria-label=\"Dark mode toggle\"\n//     />\n//   );\n// };\n// \n\n\nexport default DarkModeToggle;","map":{"version":3,"sources":["D:/Projets/Portfoliomaster/src/components/Darmode/Toggle.js"],"names":["React","FormatAlignLeftIcon","FormatAlignCenterIcon","FormatAlignRightIcon","FormatAlignJustifyIcon","ToggleButton","ToggleButtonGroup","DarkModeToggle","alignment","setAlignment","useState","handleAlignment","event","newAlignment"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,mBAAP,MAAgC,qCAAhC;AACA,OAAOC,qBAAP,MAAkC,uCAAlC;AACA,OAAOC,oBAAP,MAAiC,sCAAjC;AACA,OAAOC,sBAAP,MAAmC,wCAAnC;AACA,OAAOC,YAAP,MAAyB,4BAAzB;AACA,OAAOC,iBAAP,MAA8B,iCAA9B;;AAKA,MAAMC,cAAc,GAAG,MAAM;AACzB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BT,KAAK,CAACU,QAAN,CAAe,MAAf,CAAlC;;AAEA,QAAMC,eAAe,GAAG,CAACC,KAAD,EAAQC,YAAR,KAAyB;AAC7CJ,IAAAA,YAAY,CAACI,YAAD,CAAZ;AACH,GAFD;;AAIA,sBACI,oBAAC,iBAAD;AACI,IAAA,KAAK,EAAEL,SADX;AAEI,IAAA,SAAS,MAFb;AAGK,IAAA,IAAI,EAAC,OAHV;AAII,IAAA,QAAQ,EAAEG,eAJd;AAKI,kBAAW,gBALf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAOI,oBAAC,YAAD;AAAe,IAAA,KAAK,EAAC,MAArB;AAA4B,kBAAW,cAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAsD,cAAtD,CAPJ,eAUI,oBAAC,YAAD;AAAc,IAAA,KAAK,EAAC,QAApB;AAA6B,kBAAW,UAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAmD,cAAnD,CAVJ,CADJ;AAgBH,CAvBD,C,CAyBA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,eAAeJ,cAAf","sourcesContent":["import * as React from 'react';\r\nimport FormatAlignLeftIcon from '@mui/icons-material/FormatAlignLeft';\r\nimport FormatAlignCenterIcon from '@mui/icons-material/FormatAlignCenter';\r\nimport FormatAlignRightIcon from '@mui/icons-material/FormatAlignRight';\r\nimport FormatAlignJustifyIcon from '@mui/icons-material/FormatAlignJustify';\r\nimport ToggleButton from '@mui/material/ToggleButton';\r\nimport ToggleButtonGroup from '@mui/material/ToggleButtonGroup';\r\n\r\n\r\n\r\n\r\nconst DarkModeToggle = () => {\r\n    const [alignment, setAlignment] = React.useState('left');\r\n\r\n    const handleAlignment = (event, newAlignment) => {\r\n        setAlignment(newAlignment);\r\n    };\r\n\r\n    return (\r\n        <ToggleButtonGroup\r\n            value={alignment}\r\n            exclusive\r\n             size='small'\r\n            onChange={handleAlignment}\r\n            aria-label=\"text alignment\"\r\n        >\r\n            <ToggleButton  value=\"left\" aria-label=\"left aligned\">\r\n                ðŸŒ™\r\n            </ToggleButton>\r\n            <ToggleButton value=\"center\" aria-label=\"centered\">\r\n                ðŸ”†\r\n            </ToggleButton>\r\n        </ToggleButtonGroup>\r\n    );\r\n}\r\n\r\n// export const DarkModeToggle = () => {\r\n//   const [isDark, setIsDark] = useState(true);\r\n\r\n//   const systemPrefersDark = useMediaQuery(\r\n//     {\r\n//       query: \"(prefers-color-scheme: dark)\",\r\n//     },\r\n//     undefined,\r\n//     (isSystemDark) => setIsDark(isSystemDark)\r\n//   );\r\n\r\n//   return (\r\n//     <Toggle\r\n//       checked={isDark}\r\n//       onChange={({ target }) => setIsDark(target.checked)}\r\n//       icons={{ checked: \"ðŸŒ™\", unchecked: \"ðŸ”†\" }}\r\n//       aria-label=\"Dark mode toggle\"\r\n//     />\r\n//   );\r\n// };\r\n// \r\n\r\nexport default DarkModeToggle;"]},"metadata":{},"sourceType":"module"}